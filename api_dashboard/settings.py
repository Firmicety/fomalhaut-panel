# !/usr/bin/env python
# -*- coding: utf-8 -*-
# created by restran on 2016/1/2

from __future__ import unicode_literals

"""
Django settings for test_project project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1jwg6r%0j6nbi(e*@fup$$lyoi()j5t3s!!ziotn#k!*rs=q!9'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 如果设置DEBUG = False，一定要配置ALLOWED_HOSTS
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
]

# Application definition

INSTALLED_APPS = (
    # 'django.contrib.admin',
    # 'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djcelery',
    'djkombu',  # Add support for the django:// broker
    'accounts',
    'dashboard',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'api_dashboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api_dashboard.wsgi.application'

# Set this to True to wrap each HTTP request in a transaction on this database.
ATOMIC_REQUESTS = True

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'test_db',
#         'USER': 'root',
#         'PASSWORD': 'root',
#         'HOST': '127.0.0.1',
#         'PORT': '3306',
#     }
# }


# 关闭浏览器后到期，cookie 那边不设置 expire_date
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

# TIME_ZONE = 'UTC'
# 使用机器的系统时间，不做UTC的转换
# TIME_ZONE = None
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # 不使用时区的时间，默认使用机器的系统时间

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

# 定位到哪个文件夹
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

# TEMPLATE_DIRS = (
#     os.path.join(BASE_DIR, 'templates'),
# )

LOGGING_LEVEL = 'DEBUG' if DEBUG else 'INFO'
LOGGING_HANDLERS = ['console'] if DEBUG else ['file']
# LOGGING_LEVEL = 'INFO'
# LOGGING_HANDLERS = ['file']
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            'level': 'DEBUG',
            # 'class': 'logging.FileHandler',
            # 'class': 'logging.handlers.TimedRotatingFileHandler',
            # 如果没有使用并发的日志处理类，在多实例的情况下日志会出现缺失
            'class': 'cloghandler.ConcurrentRotatingFileHandler',
            # 当达到10MB时分割日志
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 12,
            # If delay is true,
            # then file opening is deferred until the first call to emit().
            'delay': True,
            'filename': 'logs/mysite.log',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django': {
            'handlers': LOGGING_HANDLERS,
            'level': LOGGING_LEVEL,
            'propagate': False,
        },
        'django.request': {
            'handlers': LOGGING_HANDLERS,
            'level': LOGGING_LEVEL,
            'propagate': False,
        },
        '*': {
            'handlers': LOGGING_HANDLERS,
            'level': LOGGING_LEVEL,
        },
    }
}

# 请求后端网站时，避免占用太长时间
# 异步HTTP请求时的 connect 超时时间
# 只是连接的时间
DEFAULT_ASYNC_HTTP_CONNECT_TIMEOUT = 20
# 异步HTTP请求时的 request 超时时间
# 整个请求的时间
DEFAULT_ASYNC_HTTP_REQUEST_TIMEOUT = 20

# 访问日志默认分页大小
DEFAULT_ACCESS_LOG_PAGE_SIZE = 100

# 使用 Redis 存储 Session 数据
# 注意，密码要替换成服务器上的
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6379
REDIS_DB = 0
REDIS_PASSWORD = '5iveSec0nds'
# 代理配置redis中key前缀
PROXY_CONFIG_REDIS_PREFIX = 'config'

# 基础配置在redis中的key
BASE_CONFIG_REDIS_KEY = 'base_config'

# 访问分析统计数据在redis中key前缀
ANALYTICS_REDIS_PREFIX = 'a'

# 访问日志，数据库保存月份
ACCESS_LOG_KEEP_DAYS = 60

# 网站发送出去的邮箱账号设定
EMAIL_SMTP_SERVER = 'localhost'
EMAIL_NOTIFY_NAME = 'APIGateway <no-reply@api_gateway.com>'
DEFAULT_EMAIL_NOTIFY_SUBJECT = '来自 APIGateway 的邮件通知'

# 配置djcelery相关参数，ResultStore默认存储在数据库可不必重写
import djcelery

djcelery.setup_loader()
BROKER_URL = 'django://'
# 任务定义所在的模块
CELERY_IMPORTS = ('dashboard.tasks', 'common.tasks')
# 使用和Django一样的时区
CELERY_TIMEZONE = TIME_ZONE
# 不使用时区的时间，默认使用机器的系统时间
# 否则会使用UTC时间
CELERY_ENABLE_UTC = False

# 以上为基本配置，以下为周期性任务定义，以 celerybeat_开头的
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

from datetime import timedelta

# 添加定期任务
CELERYBEAT_SCHEDULE = {
    # 定期清除旧的访问日志
    'clear_old_access_logs': {
        'task': 'dashboard.tasks.clear_old_access_logs',
        'schedule': timedelta(days=1),
        # 'schedule': timedelta(seconds=10),
    },
    # 从 redis 中读取和解析日志
    'parse_access_logs': {
        'task': 'dashboard.tasks.parse_access_logs',
        # 每隔10分钟执行一次
        'schedule': timedelta(minutes=10),
    },
}

# 发送邮件的时候要使用该名称来拼验证URL地址
SITE_DOMAIN = '127.0.0.1'  # 站点域名
SITE_NAME = u'APIGateway'  # 站点名称

# Django upgrading to 1.9 error "AppRegistryNotReady: Apps aren't loaded yet."
# 添加如下代码解决
# django.setup()
